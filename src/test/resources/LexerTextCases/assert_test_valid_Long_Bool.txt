token: Separator    lexeme: '$$'         line:1
token: Keyword      lexeme: 'int'        line:2
token: Identifier   lexeme: 'a'          line:2
token: Separator    lexeme: ','          line:2
token: Identifier   lexeme: 'b'          line:2
token: Separator    lexeme: ','          line:2
token: Identifier   lexeme: 'c'          line:2
token: Separator    lexeme: ';'          line:2
token: Keyword      lexeme: 'boolean'    line:3
token: Identifier   lexeme: 'test'       line:3
token: Separator    lexeme: ','          line:3
token: Identifier   lexeme: 'variables'  line:3
token: Separator    lexeme: ','          line:3
token: Identifier   lexeme: 'dummyVar'   line:3
token: Separator    lexeme: ';'          line:3
token: Identifier   lexeme: 'dummyVar'   line:4
token: Operator     lexeme: '='          line:4
token: Keyword      lexeme: 'false'      line:4
token: Separator    lexeme: ';'          line:4
token: Keyword      lexeme: 'get'        line:6
token: Separator    lexeme: '('          line:6
token: Identifier   lexeme: 'c'          line:6
token: Separator    lexeme: ','          line:6
token: Identifier   lexeme: 'a'          line:6
token: Separator    lexeme: ','          line:6
token: Identifier   lexeme: 'test'       line:6
token: Separator    lexeme: ')'          line:6
token: Separator    lexeme: ';'          line:6
token: Separator    lexeme: '{'          line:7
token: Keyword      lexeme: 'if'         line:8
token: Separator    lexeme: '('          line:8
token: Identifier   lexeme: 'c'          line:8
token: Operator     lexeme: '/'          line:8
token: Integer      lexeme: '2'          line:8
token: Operator     lexeme: '=='         line:8
token: Identifier   lexeme: 'a'          line:8
token: Operator     lexeme: '+'          line:8
token: Integer      lexeme: '1'          line:8
token: Separator    lexeme: ')'          line:8
token: Separator    lexeme: '{'          line:9
token: Identifier   lexeme: 'variables'  line:10
token: Operator     lexeme: '='          line:10
token: Keyword      lexeme: 'false'      line:10
token: Separator    lexeme: ';'          line:10
token: Separator    lexeme: '}'          line:11
token: Keyword      lexeme: 'else'       line:12
token: Separator    lexeme: '{'          line:13
token: Keyword      lexeme: 'if'         line:14
token: Separator    lexeme: '('          line:14
token: Identifier   lexeme: 'c'          line:14
token: Operator     lexeme: '=='         line:14
token: Identifier   lexeme: 'a'          line:14
token: Operator     lexeme: '+'          line:14
token: Integer      lexeme: '2'          line:14
token: Separator    lexeme: ')'          line:14
token: Separator    lexeme: '{'          line:15
token: Identifier   lexeme: 'variables'  line:16
token: Operator     lexeme: '='          line:16
token: Keyword      lexeme: 'true'       line:16
token: Separator    lexeme: ';'          line:16
token: Separator    lexeme: '}'          line:17
token: Keyword      lexeme: 'else'       line:18
token: Separator    lexeme: '{'          line:19
token: Identifier   lexeme: 'dummyVar'   line:20
token: Operator     lexeme: '='          line:20
token: Keyword      lexeme: 'true'       line:20
token: Separator    lexeme: ';'          line:20
token: Separator    lexeme: '}'          line:21
token: Keyword      lexeme: 'ifend'      line:21
token: Separator    lexeme: '}'          line:22
token: Keyword      lexeme: 'ifend'      line:22
token: Keyword      lexeme: 'if'         line:23
token: Separator    lexeme: '('          line:23
token: Identifier   lexeme: 'dummyVar'   line:23
token: Operator     lexeme: '=='         line:23
token: Integer      lexeme: '0'          line:23
token: Separator    lexeme: ')'          line:23
token: Separator    lexeme: '{'          line:24
token: Keyword      lexeme: 'put'        line:25
token: Separator    lexeme: '('          line:25
token: Identifier   lexeme: 'variables'  line:25
token: Separator    lexeme: ')'          line:25
token: Separator    lexeme: ';'          line:25
token: Separator    lexeme: '}'          line:26
token: Keyword      lexeme: 'ifend'      line:26
token: Keyword      lexeme: 'get'        line:28
token: Separator    lexeme: '('          line:28
token: Identifier   lexeme: 'b'          line:28
token: Separator    lexeme: ')'          line:28
token: Separator    lexeme: ';'          line:28
token: Keyword      lexeme: 'if'         line:29
token: Separator    lexeme: '('          line:29
token: Identifier   lexeme: 'b'          line:29
token: Operator     lexeme: '<'          line:29
token: Identifier   lexeme: 'a'          line:29
token: Separator    lexeme: ')'          line:29
token: Separator    lexeme: '{'          line:30
token: Keyword      lexeme: 'while'      line:31
token: Separator    lexeme: '('          line:31
token: Identifier   lexeme: 'b'          line:31
token: Operator     lexeme: '<'          line:31
token: Identifier   lexeme: 'a'          line:31
token: Separator    lexeme: ')'          line:31
token: Separator    lexeme: '{'          line:32
token: Identifier   lexeme: 'b'          line:33
token: Operator     lexeme: '='          line:33
token: Identifier   lexeme: 'b'          line:33
token: Operator     lexeme: '+'          line:33
token: Integer      lexeme: '1'          line:33
token: Separator    lexeme: ';'          line:33
token: Separator    lexeme: '}'          line:34
token: Keyword      lexeme: 'whileend'   line:34
token: Separator    lexeme: '}'          line:35
token: Keyword      lexeme: 'else'       line:36
token: Separator    lexeme: '{'          line:37
token: Keyword      lexeme: 'if'         line:38
token: Separator    lexeme: '('          line:38
token: Identifier   lexeme: 'b'          line:38
token: Operator     lexeme: '>'          line:38
token: Identifier   lexeme: 'a'          line:38
token: Separator    lexeme: ')'          line:38
token: Separator    lexeme: '{'          line:39
token: Keyword      lexeme: 'while'      line:40
token: Separator    lexeme: '('          line:40
token: Identifier   lexeme: 'b'          line:40
token: Operator     lexeme: '>'          line:40
token: Identifier   lexeme: 'a'          line:40
token: Separator    lexeme: ')'          line:40
token: Separator    lexeme: '{'          line:41
token: Keyword      lexeme: 'get'        line:42
token: Separator    lexeme: '('          line:42
token: Identifier   lexeme: 'test'       line:42
token: Separator    lexeme: ','          line:42
token: Identifier   lexeme: 'variables'  line:42
token: Separator    lexeme: ','          line:42
token: Identifier   lexeme: 'dummyVar'   line:42
token: Separator    lexeme: ')'          line:42
token: Separator    lexeme: ';'          line:42
token: Keyword      lexeme: 'get'        line:43
token: Separator    lexeme: '('          line:43
token: Identifier   lexeme: 'test'       line:43
token: Separator    lexeme: ','          line:43
token: Identifier   lexeme: 'variables'  line:43
token: Separator    lexeme: ','          line:43
token: Identifier   lexeme: 'dummyVar'   line:43
token: Separator    lexeme: ')'          line:43
token: Separator    lexeme: ';'          line:43
token: Keyword      lexeme: 'get'        line:44
token: Separator    lexeme: '('          line:44
token: Identifier   lexeme: 'test'       line:44
token: Separator    lexeme: ','          line:44
token: Identifier   lexeme: 'variables'  line:44
token: Separator    lexeme: ','          line:44
token: Identifier   lexeme: 'dummyVar'   line:44
token: Separator    lexeme: ')'          line:44
token: Separator    lexeme: ';'          line:44
token: Keyword      lexeme: 'get'        line:45
token: Separator    lexeme: '('          line:45
token: Identifier   lexeme: 'test'       line:45
token: Separator    lexeme: ','          line:45
token: Identifier   lexeme: 'variables'  line:45
token: Separator    lexeme: ','          line:45
token: Identifier   lexeme: 'dummyVar'   line:45
token: Separator    lexeme: ')'          line:45
token: Separator    lexeme: ';'          line:45
token: Keyword      lexeme: 'put'        line:46
token: Separator    lexeme: '('          line:46
token: Identifier   lexeme: 'test'       line:46
token: Separator    lexeme: ')'          line:46
token: Separator    lexeme: ';'          line:46
token: Identifier   lexeme: 'b'          line:47
token: Operator     lexeme: '='          line:47
token: Identifier   lexeme: 'b'          line:47
token: Operator     lexeme: '-'          line:47
token: Integer      lexeme: '1'          line:47
token: Separator    lexeme: ';'          line:47
token: Separator    lexeme: '}'          line:48
token: Keyword      lexeme: 'whileend'   line:48
token: Separator    lexeme: '}'          line:49
token: Keyword      lexeme: 'else'       line:50
token: Separator    lexeme: '{'          line:51
token: Identifier   lexeme: 'b'          line:52
token: Operator     lexeme: '='          line:52
token: Identifier   lexeme: 'a'          line:52
token: Operator     lexeme: '*'          line:52
token: Integer      lexeme: '10'         line:52
token: Separator    lexeme: ';'          line:52
token: Separator    lexeme: '}'          line:53
token: Keyword      lexeme: 'ifend'      line:53
token: Separator    lexeme: '}'          line:55
token: Keyword      lexeme: 'ifend'      line:55
token: Separator    lexeme: '}'          line:56
token: Keyword      lexeme: 'put'        line:57
token: Separator    lexeme: '('          line:57
token: Identifier   lexeme: 'a'          line:57
token: Separator    lexeme: ')'          line:57
token: Separator    lexeme: ';'          line:57
token: Keyword      lexeme: 'put'        line:58
token: Separator    lexeme: '('          line:58
token: Identifier   lexeme: 'b'          line:58
token: Separator    lexeme: ')'          line:58
token: Separator    lexeme: ';'          line:58
token: Keyword      lexeme: 'get'        line:59
token: Separator    lexeme: '('          line:59
token: Identifier   lexeme: 'test'       line:59
token: Separator    lexeme: ','          line:59
token: Identifier   lexeme: 'variables'  line:59
token: Separator    lexeme: ','          line:59
token: Identifier   lexeme: 'dummyVar'   line:59
token: Separator    lexeme: ')'          line:59
token: Separator    lexeme: ';'          line:59
token: Keyword      lexeme: 'put'        line:60
token: Separator    lexeme: '('          line:60
token: Identifier   lexeme: 'c'          line:60
token: Separator    lexeme: ')'          line:60
token: Separator    lexeme: ';'          line:60
token: Keyword      lexeme: 'put'        line:61
token: Separator    lexeme: '('          line:61
token: Identifier   lexeme: 'a'          line:61
token: Operator     lexeme: '+'          line:61
token: Identifier   lexeme: 'b'          line:61
token: Operator     lexeme: '+'          line:61
token: Identifier   lexeme: 'c'          line:61
token: Separator    lexeme: ')'          line:61
token: Separator    lexeme: ';'          line:61
token: Keyword      lexeme: 'put'        line:62
token: Separator    lexeme: '('          line:62
token: Identifier   lexeme: 'a'          line:62
token: Operator     lexeme: '/'          line:62
token: Identifier   lexeme: 'b'          line:62
token: Operator     lexeme: '*'          line:62
token: Identifier   lexeme: 'c'          line:62
token: Separator    lexeme: ')'          line:62
token: Separator    lexeme: ';'          line:62
token: Keyword      lexeme: 'put'        line:63
token: Separator    lexeme: '('          line:63
token: Identifier   lexeme: 'a'          line:63
token: Operator     lexeme: '*'          line:63
token: Identifier   lexeme: 'b'          line:63
token: Operator     lexeme: '/'          line:63
token: Identifier   lexeme: 'c'          line:63
token: Separator    lexeme: ')'          line:63
token: Separator    lexeme: ';'          line:63
token: Keyword      lexeme: 'put'        line:64
token: Separator    lexeme: '('          line:64
token: Identifier   lexeme: 'a'          line:64
token: Operator     lexeme: '-'          line:64
token: Identifier   lexeme: 'b'          line:64
token: Operator     lexeme: '+'          line:64
token: Identifier   lexeme: 'c'          line:64
token: Separator    lexeme: ')'          line:64
token: Separator    lexeme: ';'          line:64
token: Keyword      lexeme: 'put'        line:65
token: Separator    lexeme: '('          line:65
token: Identifier   lexeme: 'test'       line:65
token: Separator    lexeme: ')'          line:65
token: Separator    lexeme: ';'          line:65
token: Separator    lexeme: '$$'         line:66
